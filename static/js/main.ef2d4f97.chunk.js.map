{"version":3,"sources":["Card.js","API.js","Posts.js","Post.js","App.js","serviceWorker.js","index.js"],"names":["Card","title","body","id","match","useRouteMatch","to","url","API","axios","create","baseURL","loadData","a","get","res","console","log","status","data","Error","statusText","Posts","useAsync","promiseFn","error","isPending","message","map","x","key","loadPostById","postId","Post","useParams","App","path","Home","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAGe,SAASA,EAAT,GAAiC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAAMC,EAAI,EAAJA,GACnCC,EAAQC,cACZ,OACI,6BACI,4BACI,kBAAC,IAAD,CAAMC,GAAE,UAAKF,EAAMG,IAAX,YAAkBJ,IAAOF,IAErC,2BAAIC,I,YCFDM,E,OAFHC,EAAMC,OAJL,CACTC,QAAS,0CCEPC,EAAQ,uCAAG,4BAAAC,EAAA,sEACGL,EAAIM,IAAI,UADX,UACTC,EADS,OAEfC,QAAQC,IAAIF,KACKA,GAAsB,MAAfA,EAAIG,QAHb,yCAIOH,EAAII,MAJX,aAKT,IAAIC,MAAML,EAAIM,YALL,2CAAH,qDAwBCC,MAhBf,WAAkB,IAAD,EAEoBC,YAAS,CAAEC,UAAWZ,IAAjDO,EAFO,EAEPA,KAAMM,EAFC,EAEDA,MAEd,OAJe,EAEMC,UAEC,aAClBD,EAAa,yBAAN,OAAgCA,EAAME,SAG/C,oCACIR,GAAQA,EAAKS,KAAI,SAAAC,GAAC,OAClB,kBAAC7B,EAAD,CAAM8B,IAAKD,EAAE1B,GAAIF,MAAO4B,EAAE5B,MAAOC,KAAM2B,EAAE3B,KAAMC,GAAI0B,EAAE1B,UClBvD4B,EAAY,uCAAG,+BAAAlB,EAAA,6DAAOmB,EAAP,EAAOA,OAAP,SACCxB,EAAIM,IAAJ,iBAAkBkB,IADnB,UACXjB,EADW,OAEjBC,QAAQC,IAAIF,KACKA,GAAsB,MAAfA,EAAIG,QAHX,yCAIKH,EAAII,MAJT,aAKX,IAAIC,MAAML,EAAIM,YALH,2CAAH,sDAQlB,SAASrB,EAAT,GAA6B,IAAdC,EAAa,EAAbA,MAAOC,EAAM,EAANA,KAClB,OACI,6BACI,4BAAKD,GACL,2BAAIC,IAoBD+B,MAff,WAAgB,IACPD,EAAUE,cAAVF,OADM,EAGsBT,YAAS,CAACC,UAAWO,EAAcC,OAAQA,IAArEb,EAHI,EAGJA,KAAMM,EAHF,EAGEA,MAEb,OALW,EAGSC,UAEC,yCAClBD,EAAc,oDAA0BA,GAGvC,oCACKN,GAAQ,kBAAC,EAAD,CAAMlB,MAAOkB,EAAKlB,MAAOC,KAAMiB,EAAKjB,SCO1CiC,MAlCf,WAEI,OACI,kBAAC,IAAD,KACI,6BACI,6BACA,4BACI,4BACA,kBAAC,IAAD,CAAM7B,GAAG,KAAT,SAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAOJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8B,KAAK,kBACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAACC,EAAD,WAUxB,SAASA,IACL,OAAO,oCC9BSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrC,MACvB,2DCbNsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef2d4f97.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link, useRouteMatch} from 'react-router-dom'\r\n\r\nexport default function Card({title, body, id}){\r\n    let match = useRouteMatch()\r\n    return (\r\n        <div>\r\n            <h4>\r\n                <Link to={`${match.url}/${id}`}>{title}</Link>\r\n            </h4>\r\n            <p>{body}</p>\r\n        </div>\r\n    )\r\n}","import axios from 'axios'\r\n\r\nlet config = {\r\n    baseURL: 'https://jsonplaceholder.typicode.com/'\r\n}\r\n\r\nconst API = axios.create(config)\r\n\r\nexport default API","import React from 'react';\nimport { useAsync } from 'react-async'\nimport Card from './Card';\nimport API from './API';\n\nconst loadData = async () =>{\n  const res = await API.get('/posts')\n  console.log(res)\n  let responseOK = res && res.status === 200;\n  if(responseOK) return res.data\n  throw new Error(res.statusText)\n} \n\nfunction Posts() {\n\n  const { data, error, isPending } = useAsync({ promiseFn: loadData})\n\n  if (isPending) return \"Loading...\"\n  if (error) return `Something went wrong: ${error.message}`\n\n  return (\n    <>\n      { data && data.map(x => \n        <Card key={x.id} title={x.title} body={x.body} id={x.id} />\n      )}\n    </>\n  );\n}\n\nexport default Posts;\n","import React from 'react'\r\nimport {useAsync} from 'react-async'\r\nimport {useParams} from 'react-router-dom'\r\nimport API from './API'\r\n\r\nconst loadPostById = async({postId}) =>{\r\n    const res = await API.get(`/posts/${postId}`)\r\n    console.log(res)\r\n    let responseOK = res && res.status === 200;\r\n    if(responseOK) return res.data\r\n    throw new Error(res.statusText)\r\n}\r\n\r\nfunction Card({title, body}){\r\n    return(\r\n        <div>\r\n            <h4>{title}</h4>\r\n            <p>{body}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Post(){\r\n    let {postId} = useParams()\r\n\r\n    const {data, error, isPending} = useAsync({promiseFn: loadPostById, postId: postId})\r\n\r\n    if(isPending) return <p>Loading...</p>\r\n    if(error) return <p>Something went wrong: {error}</p>\r\n\r\n    return(\r\n        <>\r\n            {data && <Card title={data.title} body={data.body} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react'\r\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom'\r\nimport Posts from './Posts';\r\nimport Post from './Post';\r\n\r\nfunction App(){\r\n\r\n    return(\r\n        <Router>\r\n            <div>\r\n                <nav>\r\n                <ul>\r\n                    <li>\r\n                    <Link to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li>\r\n                    <Link to=\"/posts\">Posts</Link>\r\n                    </li>\r\n                </ul>\r\n                </nav>\r\n\r\n                {/* A <Switch> looks through its children <Route>s and\r\n                    renders the first one that matches the current URL. */}\r\n                <Switch>\r\n                    <Route path=\"/posts/:postId\">\r\n                        <Post/>\r\n                    </Route>\r\n                    <Route path=\"/posts\">\r\n                        <Posts />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\nfunction Home() {\r\n    return <h2>Home</h2>;\r\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}